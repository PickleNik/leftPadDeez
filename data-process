#!/usr/bin/env node

const path = require("path");
const fs = require("fs");
const folder = process.argv[2];

const stats = fs.statSync(folder);

if (!stats.isDirectory()) {
    throw new Error("must be directory");
}

const files = fs.readdirSync(folder);

/** @type {number[]} */
const lengths = [50, 500, 1000];

const names = process.argv[3] !== undefined ?
    process.argv[3].split(",") :
    ["native", "buffer", "specialCase", "leftPadEmber", "leftPadTravvy", "leftPad", "so", "sotr", "primeLive"];
const concurrencies = [250, 500, 750, 1000];
const dataPoints = [];
const data = [];

for (let i = 0; i < concurrencies.length; ++i) {
    for (let j = 0; j < names.length; ++j) {
        dataPoints.push(`${names[j]}_${concurrencies[i]}`);
        data.push([]);
    }
}

for (const file of files) {
    const [
        name,
        length,
        concurrency,
    ] = file.split("_");

    if (!name || !concurrency || !length) {
        continue;
    }

    const lengthIdx = lengths.indexOf(+length);
    const nameIdx = dataPoints.indexOf(`${name}_${concurrency}`);

    if (lengthIdx === -1 || nameIdx === -1) {
        continue;
    }

    const filePath = path.join(folder, file);
    const contents = fs.readFileSync(filePath, "utf8").toString().split("\n");
    const totals = contents.filter(line => line.includes("Total:"));

    let sum = 0;
    for (const total of totals) {
        const [, med, _] = total.split(" ").map(x => +x).filter(x => x);
        sum += med;
    }

    data[nameIdx][lengthIdx] = sum / totals.length || 0;
}

function getConcurrencyRow(concurrency) {
    const row = [];
    for (const name of names) {
        row.push(`${name}_${concurrency}`);
    }
    return row;
}

/**
 * @param {number} concurrency
 */
function printOut(concurrency) {
    const test = getConcurrencyRow(concurrency);
    const out = [
        ["length", ...test].join(","),
    ]
    for (const length of lengths) {
        const row = [length];
        for (const name of test) {
            const idx = dataPoints.indexOf(name);
            const value = Math.round(data[idx][lengths.indexOf(length)]) || 0;
            row.push(value);
        }
        out.push(row.join(","));
    }

    for (const o of out) {
        console.log(o);
    }
}

for (const concurrency of concurrencies) {
    printOut(concurrency);
    console.log();
}

